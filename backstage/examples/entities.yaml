---
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-system
apiVersion: backstage.io/v1alpha1
kind: System
metadata:
  name: examples
spec:
  owner: guests
---
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-component
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: example-website
spec:
  type: website
  lifecycle: experimental
  owner: guests
  system: examples
  providesApis: [example-grpc-api]
---
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-api
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: example-grpc-api
spec:
  type: grpc
  lifecycle: experimental
  owner: guests
  system: examples
  definition: |
    syntax = "proto3";

    service Exampler {
      rpc Example (ExampleMessage) returns (ExampleMessage) {};
    }

    message ExampleMessage {
      string example = 1;
    };
---
# Component representing the Backstage backend itself
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: backstage-backend-app # Choose a unique name for the Backstage entity
  description: The Backstage backend application deployment
  annotations:
    # Link this entity to Kubernetes resources with this ID
    'backstage.io/kubernetes-id': backstage-backend-app 
    # Tell Backstage to look in the 'in-cluster' defined in app-config.yaml
    'backstage.io/kubernetes-cluster': in-cluster 
    # Specify the namespace where Backstage backend runs (replace if different)
    'backstage.io/kubernetes-namespace': backstage 
spec:
  type: service
  lifecycle: production
  owner: guests # Change owner as appropriate
  system: examples # Assign to a system if desired